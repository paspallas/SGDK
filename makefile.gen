include $(GDK)/common.gen

SRC 	:= src
RES 	:= res
INCLUDE := inc

SRC_C 	:= $(wildcard *.c)
SRC_C 	+= $(wildcard $(SRC)/*.c)
SRC_CPP	:= $(wildcard *.cpp)
SRC_CPP	+= $(wildcard $(SRC)/*.cpp)
SRC_S 	:= $(wildcard *.s)
SRC_S 	+= $(wildcard $(SRC)/*.s)
SRC_ASM := $(wildcard *.asm)
SRC_ASM += $(wildcard $(SRC)/*.asm)
SRC_S80 := $(wildcard *.s80)
SRC_S80 += $(wildcard $(SRC)/*.s80)

RES_C 	:= $(wildcard $(RES)/*.c)
RES_S 	:= $(wildcard $(RES)/*.s)
RES_RES := $(wildcard *.res)
RES_RES += $(wildcard $(RES)/*.res)

OBJ 	:= $(RES_RES:.res=.o)
OBJ 	+= $(RES_S:.s=.o)
OBJ 	+= $(RES_C:.c=.o)
OBJ 	+= $(SRC_S80:.s80=.o)
OBJ 	+= $(SRC_ASM:.asm=.o)
OBJ 	+= $(SRC_S:.s=.o)
OBJ 	+= $(SRC_C:.c=.o)
OBJ 	+= $(SRC_CPP:.cpp=.o)
OBJS 	:= $(addprefix out/, $(OBJ))

DEP 	:= $(SRC_C:.c=.d)
DEP 	+= $(SRC_CPP:.cpp=.d)
DEPS 	:= $(addprefix out/, $(DEP))

#################################

INCS 	 := -I$(INCLUDE) -I$(SRC) -I$(RES) -I$(INCLUDE_LIB) -I$(RES_LIB)
FLAGSZ80 := -i$(SRC) -i$(INCLUDE) -i$(RES) -i$(SRC_LIB) -i$(INCLUDE_LIB)

release: FLAGS := $(OPT) $(NOLTO) $(INCS)
release: LIBMD := -L$(LIB) -lmd
release: pre-build out/rom.bin 

debug: FLAGS := $(INCS) -O1 -ggdb -DDEBUG=1
debug: LIBMD := -L$(LIB) -lmd_debug
debug: pre-build out/rom.bin out/rom.out out/symbol.txt

all: release
default: release

Default: release
Debug: debug
Release: release

.PHONY: clean

cleanobj:
	$(RM) -f $(OBJS) out/sega.o out/rom_head.bin out/rom_head.o out/rom.out

clean: cleanobj
	$(RM) -f out.lst out/cmd_ out/rom.nm out/rom.wch out/rom.bin

cleanrelease: clean

cleandebug: clean
	$(RM) -f  out/symbol.txt

cleandefault: clean
cleanDefault: clean
cleanRelease: cleanrelease
cleanDebug: cleandebug


pre-build:
	$(MKDIR) -p $(SRC)/boot
	$(MKDIR) -p out
	$(MKDIR) -p out/src
	$(MKDIR) -p out/res


out/rom.bin: out/rom.out
	$(OBJCPY) -O binary out/rom.out out/rom.bin
	$(SIZEBND) out/rom.bin -sizealign 8192

out/symbol.txt: out/rom.out
	$(NM) -n out/rom.out > out/symbol.txt

out/rom.out: out/sega.o out/cmd_ $(LIBMD)
	$(CC) -B$(X68K) -Wl,-gc-sections -n -T $(GDK)/md.ld \
	-nostdlib out/sega.o @out/cmd_ $(LIBMD) $(LIBGCC) -o out/rom.out
	$(RM) out/cmd_

out/cmd_: $(OBJS)
	$(ECHO) "$(OBJS)" > out/cmd_

out/sega.o: $(SRC)/boot/sega.s out/rom_head.bin
	$(CC) $(FLAGS) $(CFLAGS) -c $(SRC)/boot/sega.s -o $@

out/rom_head.bin: out/rom_head.o
	$(LD) -T $(GDK)/md.ld -nostdlib --oformat binary -o $@ $<

out/rom_head.o: $(SRC)/boot/rom_head.c
	$(CC) $(FLAGS) $(CFLAGS) -c $< -o $@

$(SRC)/boot/sega.s: $(SRC_LIB)/boot/sega.s
	$(CP) $< $@

$(SRC)/boot/rom_head.c: $(SRC_LIB)/boot/rom_head.c
	$(CP) $< $@

out/%.o: %.cpp
	$(CXX) $(FLAGS) $(CXXFLAGS) -c $< -o $@

out/%.o: %.c
	$(CC) $(FLAGS) $(CFLAGS) -c $< -o $@

out/%.o: %.s
	$(CC) $(FLAGS) $(CFLAGS) -c $< -o $@

%.s: %.res
	$(RESCOMP) $< $@

%.s: %.asm
	$(MACCER) -o $@ $<

%.o80: %.s80
	$(ASMZ80) $(FLAGSZ80) $< $@ out.lst

%.s: %.o80
	$(BINTOS) $<

############################################

-include $(DEPS)
